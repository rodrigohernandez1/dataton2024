{r}
# Cargar librerías necesarias
library(sf)
library(ggplot2)

# Paso 1: Cargar los shapefiles (asegúrate de que todos los archivos relacionados están en la misma carpeta)
frontera_iztapalapa <- st_read("C:/Users/Diego/OneDrive/Documents/Dataton/Iztapalapa/frontera_iztapalapa.shp")
farmacias_iztapalapa <- st_read("C:/Users/Diego/OneDrive/Documents/Dataton/Iztapalapa/lambert_iztapalapa.shp")

# Paso 2: Asegurarse de que ambos shapefiles están en el mismo sistema de referencia espacial
if (st_crs(frontera_iztapalapa) != st_crs(farmacias_iztapalapa)) {
  farmacias_iztapalapa <- st_transform(farmacias_iztapalapa, st_crs(frontera_iztapalapa))
}

# Paso 3: Graficar los datos
ggplot() +
  geom_sf(data = frontera_iztapalapa, fill = NA, color = "grey", size = 1) +  # Graficar la frontera
  geom_sf(data = farmacias_iztapalapa, color = "deepskyblue", size = .5) +  # Graficar las farmacias
  ggtitle("Frontera del municipio de Iztapalapa y las farmacias dentro de él") +
  theme_minimal()

# (Opcional) Guardar la visualización
ggsave("iztapalapa_frontera_farmacias.png", width = 10, height = 8)


{r}
# Cargar las librerías necesarias
library(sf)
library(ggplot2)
library(deldir)

# Paso 1: Cargar los datos
farmacias_iztapalapa <- st_read("C:/Users/Diego/OneDrive/Documents/Dataton/Iztapalapa/lambert_iztapalapa.shp")
frontera_iztapalapa <- st_read("C:/Users/Diego/OneDrive/Documents/Dataton/Iztapalapa/frontera_iztapalapa.shp")

# Paso 2: Extraer las coordenadas de las farmacias
coords_farmacias_iztapalapa <- st_coordinates(farmacias_iztapalapa)

# Convertir a dataframe y renombrar las columnas
df_farmacias_iztapalapa <- as.data.frame(coords_farmacias_iztapalapa)
colnames(df_farmacias_iztapalapa) <- c("longitud", "latitud")

# Paso 3: Calcular el diagrama de Voronoi usando las coordenadas de las farmacias
voronoi_result_iztapalapa <- deldir(df_farmacias_iztapalapa$longitud, df_farmacias_iztapalapa$latitud)

# Extraer los segmentos del Voronoi
segments_iztapalapa <- voronoi_result_iztapalapa$dirsgs  # Asegúrate de usar voronoi_result aquí

# Convertir los segmentos a un dataframe
df_segments_iztapalapa <- as.data.frame(segments_iztapalapa)
colnames(df_segments_iztapalapa) <- c("longitud_inicio", "latitud_inicio", "longitud_fin", "latitud_fin")

# Paso 4: Graficar el diagrama de Voronoi y las farmacias
ggplot() +
  geom_sf(data = frontera_iztapalapa, fill = NA, color = "black") +  # Frontera del municipio
  geom_segment(data = df_segments_iztapalapa, 
               aes(x = longitud_inicio, y = latitud_inicio, 
                   xend = longitud_fin, yend = latitud_fin), 
               color = "grey") +  # Diagrama de Voronoi
  geom_point(data = df_farmacias_iztapalapa, aes(x = longitud, y = latitud), color = "deepskyblue", size = .5) +  # Farmacias
  ggtitle("Diagrama de Voronoi para las farmacias en Iztapalapa") +
  theme_minimal()

# (Opcional) Guardar la visualización
ggsave("iztapalapa_frontera_farmacias.png", width = 10, height = 8)

{r}
# Cargar librerías
library(sf)
library(ggplot2)
library(deldir)

# Cargar los shapefiles
frontera_iztapalapa <- st_read("C:/Users/Diego/OneDrive/Documents/Dataton/Iztapalapa/frontera_iztapalapa.shp")
lambert_iztapalapa <- st_read("C:/Users/Diego/OneDrive/Documents/Dataton/Iztapalapa/lambert_iztapalapa.shp")

# Extraer coordenadas de las farmacias
coords_farmacias_iztapalapa <- st_coordinates(lambert_iztapalapa)

# Calcular el diagrama de Voronoi
voronoi_result_iztapalapa <- deldir(coords_farmacias_iztapalapa[,1], coords_farmacias_iztapalapa[,2])
vertices_iztapalapa <- data.frame(voronoi_result_iztapalapa$dirsgs)
names(vertices_iztapalapa) <- c("x1", "y1", "id1", "id2")
vertices_sf_iztapalapa <- st_as_sf(vertices_iztapalapa[, c("x1", "y1")], coords = c("x1", "y1"), crs = st_crs(frontera_iztapalapa))

# Calcular distancias a los puntos de farmacias
distances <- apply(st_coordinates(vertices_sf_iztapalapa), 1, function(v) {
  min(sqrt((coords_farmacias_iztapalapa[,1] - v[1])^2 + (coords_farmacias_iztapalapa[,2] - v[2])^2))
})

# Añadir las distancias al objeto de vértices
vertices_sf_iztapalapa$distance <- distances

# Convertir vertices_sf a dataframe
vertices_iztapalapa_df <- as.data.frame(st_coordinates(vertices_sf_iztapalapa))
vertices_iztapalapa_df$distance <- vertices_sf_iztapalapa$distance

# Renombrar las columnas de las coordenadas para evitar confusiones
colnames(vertices_iztapalapa_df) <- c("X", "Y", "distance")

# Graficar el mapa de calor de las distancias a los vértices de Voronoi
ggplot() +
  geom_sf(data = frontera_iztapalapa, fill = NA, color = "black") +
  geom_point(data = vertices_iztapalapa_df, 
             aes(x = X, y = Y, color = distance), size = .3) +
  scale_color_gradient(low = "green", high = "red") +
  labs(title = "Mapa de Calor de Distancias a Vértices de Voronoi",
       color = "Distancia") +
  theme_minimal()

# (Opcional) Guardar la visualización
ggsave("iztapalapa_frontera_farmacias.png", width = 10, height = 8)



{r}
# Filtrar los vértices que están dentro de la frontera del municipio
vertices_filtered_iztapalapa <- vertices_sf_iztapalapa[st_within(vertices_sf_iztapalapa, frontera_iztapalapa, sparse = FALSE), ]

# Verificar si hay vértices dentro de la frontera
if (nrow(vertices_filtered_iztapalapa) > 0) {
  # Calcular distancias a los puntos de farmacias solo para los vértices filtrados
  distances_filtered_iztapalapa <- apply(st_coordinates(vertices_filtered_iztapalapa), 1, function(v) {
    min(sqrt((coords_farmacias_iztapalapa[,1] - v[1])^2 + (coords_farmacias_iztapalapa[,2] - v[2])^2))
  })
  
  # Añadir las distancias al objeto de vértices filtrados
  vertices_filtered_iztapalapa$distance <- distances_filtered_iztapalapa
  
  # Convertir vertices_filtered a dataframe
  vertices_filtered_iztapalapa_df <- as.data.frame(st_coordinates(vertices_filtered_iztapalapa))
  vertices_filtered_iztapalapa_df$distance <- vertices_filtered_iztapalapa$distance
  
  # Renombrar las columnas de las coordenadas
  colnames(vertices_filtered_iztapalapa_df) <- c("X", "Y", "distance")
  
  # Graficar el mapa de calor de las distancias a los vértices de Voronoi filtrados
  ggplot() +
    geom_sf(data = frontera_iztapalapa, fill = NA, color = "black") +
    geom_point(data = vertices_filtered_iztapalapa_df, 
               aes(x = X, y = Y, color = distance), size = .4) +
    scale_color_gradient(low = "green", high = "red") +
    labs(title = "Mapa de Calor de Distancias a Vértices de Voronoi (Filtrados)",
         color = "Distancia") +
    theme_minimal()
} else {
  print("No hay vértices dentro de la frontera del municipio.")
}


{r}
# Ordenar los vértices filtrados por la distancia en orden descendente
vertices_top_20_iztapalapa <- vertices_filtered_iztapalapa_df[order(-vertices_filtered_iztapalapa_df$distance), ]

# Seleccionar los 20 vértices más lejanos
vertices_top_20_iztapalapa <- vertices_top_20_iztapalapa[1:20, ]

# Imprimir la tabla con los 20 vértices más lejanos
print(vertices_top_20_iztapalapa)

# Graficar el mapa con los 20 vértices más lejanos
ggplot() +
  geom_sf(data = frontera_iztapalapa, fill = NA, color = "black") +  # Dibujar el municipio
  geom_point(data = vertices_top_20_iztapalapa, 
             aes(x = X, y = Y, color = distance), size = .4) +          # Graficar los 20 vértices
  scale_color_gradient(low = "green", high = "red") +                 # Escala de color de verde a rojo
  labs(title = "Mapa de los 20 Vértices más Lejanos de Farmacias",
       color = "Distancia") +
  theme_minimal()


{r}
# Cargar librerías necesarias
library(sf)
library(ggplot2)

# Paso 1: Cargar los shapefiles (asegúrate de que todos los archivos relacionados están en la misma carpeta)
frontera_ecatzingo <- st_read("C:/Users/Diego/OneDrive/Documents/Dataton/Ecatzingo/frontera_ecatzingo.shp")
farmacias_ecatzingo <- st_read("C:/Users/Diego/OneDrive/Documents/Dataton/Ecatzingo/lambert_ecatzingo.shp")

# Paso 2: Asegurarse de que ambos shapefiles están en el mismo sistema de referencia espacial
if (st_crs(frontera_ecatzingo) != st_crs(farmacias_ecatzingo)) {
  farmacias_ecatzingo <- st_transform(farmacias_ecatzingo, st_crs(frontera_ecatzingo))
}

# Paso 3: Graficar los datos
ggplot() +
  geom_sf(data = frontera_ecatzingo, fill = NA, color = "grey", size = 1) +  # Graficar la frontera
  geom_sf(data = farmacias_ecatzingo, color = "deepskyblue", size = .5) +  # Graficar las farmacias
  ggtitle("Frontera del municipio de Ecatzingo y las farmacias dentro de él") +
  theme_minimal()

# (Opcional) Guardar la visualización
ggsave("ecatzingo_frontera_farmacias.png", width = 10, height = 8)


{r}
# Cargar las librerías necesarias
library(sf)
library(ggplot2)
library(deldir)

# Paso 1: Cargar los datos
farmacias_ecatzingo <- st_read("C:/Users/Diego/OneDrive/Documents/Dataton/Ecatzingo/lambert_ecatzingo.shp")
frontera_ecatzingo <- st_read("C:/Users/Diego/OneDrive/Documents/Dataton/Ecatzingo/frontera_ecatzingo.shp")

# Paso 2: Extraer las coordenadas de las farmacias
coords_farmacias_ecatzingo <- st_coordinates(farmacias_ecatzingo)

# Convertir a dataframe y renombrar las columnas
df_farmacias_ecatzingo <- as.data.frame(coords_farmacias_ecatzingo)
colnames(df_farmacias_ecatzingo) <- c("longitud", "latitud")

# Paso 3: Calcular el diagrama de Voronoi usando las coordenadas de las farmacias
voronoi_result_ecatzingo <- deldir(df_farmacias_ecatzingo$longitud, df_farmacias_ecatzingo$latitud)

# Extraer los segmentos del Voronoi
segments <- voronoi_result_ecatzingo$dirsgs

# Convertir los segmentos a un dataframe
df_segments_ecatzingo <- as.data.frame(segments)
colnames(df_segments_ecatzingo) <- c("longitud_inicio", "latitud_inicio", "longitud_fin", "latitud_fin")

# Paso 4: Graficar el diagrama de Voronoi y las farmacias
ggplot() +
  geom_sf(data = frontera_ecatzingo, fill = NA, color = "black") +  # Frontera del municipio
  geom_segment(data = df_segments_ecatzingo, 
               aes(x = longitud_inicio, y = latitud_inicio, 
                   xend = longitud_fin, yend = latitud_fin), 
               color = "grey") +  # Diagrama de Voronoi
  geom_point(data = df_farmacias_ecatzingo, aes(x = longitud, y = latitud), color = "deepskyblue", size = .5) +  # Farmacias
  ggtitle("Diagrama de Voronoi para las farmacias en Ecatzingo") +
  theme_minimal()

# (Opcional) Guardar la visualización
ggsave("ecatzingo_voronoi.png", width = 10, height = 8)


{r}
# Cargar librerías
library(sf)
library(ggplot2)
library(deldir)

# Cargar los shapefiles
frontera_ecatzingo <- st_read("C:/Users/Diego/OneDrive/Documents/Dataton/Ecatzingo/frontera_ecatzingo.shp")
farmacias_ecatzingo <- st_read("C:/Users/Diego/OneDrive/Documents/Dataton/Ecatzingo/lambert_ecatzingo.shp")

# Extraer coordenadas de las farmacias
coords_farmacias_ecatzingo <- st_coordinates(farmacias_ecatzingo)

# Calcular el diagrama de Voronoi
voronoi_result_ecatzingo <- deldir(coords_farmacias_ecatzingo[,1], coords_farmacias_ecatzingo[,2])

# Extraer los vértices de Voronoi
vertices_ecatzingo <- data.frame(voronoi_result_ecatzingo$dirsgs)
names(vertices) <- c("x1", "y1", "id1", "id2")

# Convertir a objeto sf
vertices_sf_ecatzingo <- st_as_sf(vertices_ecatzingo[, c("x1", "y1")], coords = c("x1", "y1"), crs = st_crs(frontera_ecatzingo))

# Filtrar los vértices dentro de la frontera
vertices_sf_ecatzingo <- vertices_sf_ecatzingo[st_within(vertices_sf_ecatzingo, st_geometry(frontera_ecatzingo), sparse = FALSE),]

# Calcular distancias desde los vértices a los puntos de farmacias
if (nrow(vertices_sf_ecatzingo) > 0) {
  distances <- apply(st_coordinates(vertices_sf_ecatzingo), 1, function(v) {
    min(sqrt((coords_farmacias_ecatzingo[,1] - v[1])^2 + (coords_farmacias_ecatzingo[,2] - v[2])^2))
  })
  
  # Agregar distancias a los vértices
  vertices_sf_ecatzingo$distance <- distances

  # Graficar el mapa de calor basado en la distancia
  ggplot() +
    geom_sf(data = frontera_ecatzingo, fill = NA, color = "black") +
    geom_point(data = as.data.frame(st_coordinates(vertices_sf_ecatzingo)), 
               aes(x = X, y = Y, color = vertices_sf_ecatzingo$distance), size = .4) +
    scale_color_gradient(low = "green", high = "red") +
    labs(title = "Mapa de Calor de Distancias a Vértices de Voronoi",
         color = "Distancia") +
    theme_minimal()
} else {
  print("No se encontraron vértices dentro de la frontera.")
}

# (Opcional) Guardar la visualización
ggsave("ecatzingo_voronoi_heatmap.png", width = 10, height = 8)


{r}
# Cargar librerías necesarias
library(sf)
library(ggplot2)

# Paso 1: Cargar los shapefiles
frontera_nicolas_romero <- st_read("C:/Users/Diego/OneDrive/Documents/Dataton/Nicolas Romero/frontera_nicolas_romero.shp")
farmacias_nicolas_romero <- st_read("C:/Users/Diego/OneDrive/Documents/Dataton/Nicolas Romero/lambert_nicolas_romero.shp")

# Paso 2: Asegurarse de que ambos shapefiles están en el mismo sistema de referencia espacial
if (st_crs(frontera_nicolas_romero) != st_crs(farmacias_nicolas_romero)) {
  farmacias_nicolas_romero <- st_transform(farmacias_nicolas_romero, st_crs(frontera_nicolas_romero))
}

# Paso 3: Graficar los datos
ggplot() +
  geom_sf(data = frontera_nicolas_romero, fill = NA, color = "grey", size = 1) +  # Graficar la frontera
  geom_sf(data = farmacias_nicolas_romero, color = "deepskyblue", size = .5) +  # Graficar las farmacias
  ggtitle("Frontera del municipio de Nicolás Romero y las farmacias dentro de él") +
  theme_minimal()

# (Opcional) Guardar la visualización
ggsave("nicolas_romero_frontera_farmacias.png", width = 10, height = 8)


{r}
# Cargar las librerías necesarias
library(sf)
library(ggplot2)
library(deldir)

# Paso 1: Cargar los datos
farmacias_nicolas_romero <- st_read("C:/Users/Diego/OneDrive/Documents/Dataton/Nicolas Romero/lambert_nicolas_romero.shp")
frontera_nicolas_romero <- st_read("C:/Users/Diego/OneDrive/Documents/Dataton/Nicolas Romero/frontera_nicolas_romero.shp")

# Paso 2: Extraer las coordenadas de las farmacias
coords_farmacias_nicolas_romero <- st_coordinates(farmacias_nicolas_romero)

# Convertir a dataframe y renombrar las columnas
df_farmacias_nicolas_romero <- as.data.frame(coords_farmacias_nicolas_romero)
colnames(df_farmacias_nicolas_romero) <- c("longitud", "latitud")

# Paso 3: Calcular el diagrama de Voronoi usando las coordenadas de las farmacias
voronoi_result_nicolas_romero <- deldir(df_farmacias_nicolas_romero$longitud, df_farmacias_nicolas_romero$latitud)

# Extraer los segmentos del Voronoi
segments <- voronoi_result_nicolas_romero$dirsgs

# Convertir los segmentos a un dataframe
df_segments_nicolas_romero <- as.data.frame(segments)
colnames(df_segments_nicolas_romero) <- c("longitud_inicio", "latitud_inicio", "longitud_fin", "latitud_fin")

# Paso 4: Graficar el diagrama de Voronoi y las farmacias
ggplot() +
  geom_sf(data = frontera_nicolas_romero, fill = NA, color = "black") +  # Frontera del municipio
  geom_segment(data = df_segments_nicolas_romero, 
               aes(x = longitud_inicio, y = latitud_inicio, 
                   xend = longitud_fin, yend = latitud_fin), 
               color = "grey") +  # Diagrama de Voronoi
  geom_point(data = df_farmacias_nicolas_romero, aes(x = longitud, y = latitud), color = "deepskyblue", size = .5) +  # Farmacias
  ggtitle("Diagrama de Voronoi para las farmacias en Nicolás Romero") +
  theme_minimal()

# (Opcional) Guardar la visualización
ggsave("nicolas_romero_voronoi.png", width = 10, height = 8)



{r}
# Cargar librerías
library(sf)
library(ggplot2)
library(deldir)

# Cargar los shapefiles
frontera_nicolas_romero <- st_read("C:/Users/Diego/OneDrive/Documents/Dataton/Nicolas Romero/frontera_nicolas_romero.shp")
lambert_nicolas_romero <- st_read("C:/Users/Diego/OneDrive/Documents/Dataton/Nicolas Romero/lambert_nicolas_romero.shp")

# Extraer coordenadas de las farmacias
coords_farmacias_nicolas_romero <- st_coordinates(lambert_nicolas_romero)

# Calcular el diagrama de Voronoi
voronoi_result_nicolas_romero <- deldir(coords_farmacias_nicolas_romero[,1], coords_farmacias_nicolas_romero[,2])
vertices_nicolas_romero <- data.frame(voronoi_result_nicolas_romero$dirsgs)
names(vertices_nicolas_romero) <- c("x1", "y1", "id1", "id2")
vertices_sf_nicolas_romero <- st_as_sf(vertices_nicolas_romero[, c("x1", "y1")], coords = c("x1", "y1"), crs = st_crs(frontera_nicolas_romero))

# Calcular distancias a los puntos de farmacias
distances <- apply(st_coordinates(vertices_sf_nicolas_romero), 1, function(v) {
  min(sqrt((coords_farmacias_nicolas_romero[,1] - v[1])^2 + (coords_farmacias_nicolas_romero[,2] - v[2])^2))
})

# Añadir las distancias al objeto de vértices
vertices_sf_nicolas_romero$distance <- distances

# Convertir vertices_sf a dataframe
vertices_nicolas_romero_df <- as.data.frame(st_coordinates(vertices_sf_nicolas_romero))
vertices_nicolas_romero_df$distance <- vertices_sf_nicolas_romero$distance

# Renombrar las columnas de las coordenadas para evitar confusiones
colnames(vertices_nicolas_romero_df) <- c("X", "Y", "distance")

# Graficar el mapa de calor de las distancias a los vértices de Voronoi
ggplot() +
  geom_sf(data = frontera_nicolas_romero, fill = NA, color = "black") +
  geom_point(data = vertices_nicolas_romero_df, 
             aes(x = X, y = Y, color = distance), size = .3) +
  scale_color_gradient(low = "green", high = "red") +
  labs(title = "Mapa de Calor de Distancias a Vértices de Voronoi",
       color = "Distancia") +
  theme_minimal()

# (Opcional) Guardar la visualización
ggsave("nicolas_romero_frontera_farmacias.png", width = 10, height = 8)


{r}
# Filtrar los vértices que están dentro de la frontera del municipio
vertices_filtered_nicolas_romero <- vertices_sf_nicolas_romero[st_within(vertices_sf_nicolas_romero, frontera_nicolas_romero, sparse = FALSE), ]

# Verificar si hay vértices dentro de la frontera
if (nrow(vertices_filtered_nicolas_romero) > 0) {
  # Calcular distancias a los puntos de farmacias solo para los vértices filtrados
  distances_filtered_nicolas_romero <- apply(st_coordinates(vertices_filtered_nicolas_romero), 1, function(v) {
    min(sqrt((coords_farmacias_nicolas_romero[,1] - v[1])^2 + (coords_farmacias_nicolas_romero[,2] - v[2])^2))
  })
  
  # Añadir las distancias al objeto de vértices filtrados
  vertices_filtered_nicolas_romero$distance <- distances_filtered_nicolas_romero
  
  # Convertir vertices_filtered a dataframe
  vertices_filtered_nicolas_romero_df <- as.data.frame(st_coordinates(vertices_filtered_nicolas_romero))
  vertices_filtered_nicolas_romero_df$distance <- vertices_filtered_nicolas_romero$distance
  
  # Renombrar las columnas de las coordenadas
  colnames(vertices_filtered_nicolas_romero_df) <- c("X", "Y", "distance")
  
  # Graficar el mapa de calor de las distancias a los vértices de Voronoi filtrados
  ggplot() +
    geom_sf(data = frontera_nicolas_romero, fill = NA, color = "black") +
    geom_point(data = vertices_filtered_nicolas_romero_df, 
               aes(x = X, y = Y, color = distance), size = .4) +
    scale_color_gradient(low = "green", high = "red") +
    labs(title = "Mapa de Calor de Distancias a Vértices de Voronoi (Filtrados)",
         color = "Distancia") +
    theme_minimal()
} else {
  print("No hay vértices dentro de la frontera del municipio.")
}


{r}
# Ordenar los vértices filtrados por la distancia en orden descendente
vertices_top_20_nicolas_romero <- vertices_filtered_nicolas_romero_df[order(-vertices_filtered_nicolas_romero_df$distance), ]

# Seleccionar los 20 vértices más lejanos
vertices_top_20_nicolas_romero <- vertices_top_20_nicolas_romero[1:20, ]

# Imprimir la tabla con los 20 vértices más lejanos
print(vertices_top_20_nicolas_romero)

# Graficar el mapa con los 20 vértices más lejanos
ggplot() +
  geom_sf(data = frontera_nicolas_romero, fill = NA, color = "black") +  # Dibujar el municipio
  geom_point(data = vertices_top_20_nicolas_romero, 
             aes(x = X, y = Y, color = distance), size = .4) +          # Graficar los 20 vértices
  scale_color_gradient(low = "green", high = "red") +                 # Escala de color de verde a rojo
  labs(title = "Mapa de los 20 Vértices más Lejanos de Farmacias",
       color = "Distancia") +
  theme_minimal()


{r}
# Cargar librerías necesarias
library(sf)
library(ggplot2)

# Paso 1: Cargar los shapefiles (asegúrate de que todos los archivos relacionados están en la misma carpeta)
frontera_quecholac <- st_read("C:/Users/Diego/OneDrive/Documents/Dataton/Quecholac/frontera_quecholac.shp")
farmacias_quecholac <- st_read("C:/Users/Diego/OneDrive/Documents/Dataton/Quecholac/lambert_quecholac.shp")

# Paso 2: Asegurarse de que ambos shapefiles están en el mismo sistema de referencia espacial
if (st_crs(frontera_quecholac) != st_crs(farmacias_quecholac)) {
  farmacias_quecholac <- st_transform(farmacias_quecholac, st_crs(frontera_quecholac))
}

# Paso 3: Graficar los datos
ggplot() +
  geom_sf(data = frontera_quecholac, fill = NA, color = "grey", size = 1) +  # Graficar la frontera
  geom_sf(data = farmacias_quecholac, color = "deepskyblue", size = .5) +  # Graficar las farmacias
  ggtitle("Frontera del municipio de Iztapalapa y las farmacias dentro de él") +
  theme_minimal()

# (Opcional) Guardar la visualización
ggsave("quecholac_frontera_farmacias.png", width = 10, height = 8)

{r}
# Cargar las librerías necesarias
library(sf)
library(ggplot2)
library(deldir)

# Paso 1: Cargar los datos
farmacias_quecholac <- st_read("C:/Users/Diego/OneDrive/Documents/Dataton/Quecholac/lambert_quecholac.shp")
frontera_quecholac <- st_read("C:/Users/Diego/OneDrive/Documents/Dataton/Quecholac/frontera_quecholac.shp")

# Paso 2: Extraer las coordenadas de las farmacias
coords_farmacias_quecholac <- st_coordinates(farmacias_quecholac)

# Convertir a dataframe y renombrar las columnas
df_farmacias_quecholac <- as.data.frame(coords_farmacias_quecholac)
colnames(df_farmacias_quecholac) <- c("longitud", "latitud")

# Paso 3: Calcular el diagrama de Voronoi usando las coordenadas de las farmacias
voronoi_result_quecholac <- deldir(df_farmacias_quecholac$longitud, df_farmacias_quecholac$latitud)

# Extraer los segmentos del Voronoi
segments_quecholac <- voronoi_result_quecholac$dirsgs  # Asegúrate de usar voronoi_result aquí

# Convertir los segmentos a un dataframe
df_segments_quecholac <- as.data.frame(segments_quecholac)
colnames(df_segments_quecholac) <- c("longitud_inicio", "latitud_inicio", "longitud_fin", "latitud_fin")

# Paso 4: Graficar el diagrama de Voronoi y las farmacias
ggplot() +
  geom_sf(data = frontera_quecholac, fill = NA, color = "black") +  # Frontera del municipio
  geom_segment(data = df_segments_quecholac, 
               aes(x = longitud_inicio, y = latitud_inicio, 
                   xend = longitud_fin, yend = latitud_fin), 
               color = "grey") +  # Diagrama de Voronoi
  geom_point(data = df_farmacias_quecholac, aes(x = longitud, y = latitud), color = "deepskyblue", size = .5) +  # Farmacias
  ggtitle("Diagrama de Voronoi para las farmacias en Quecholac") +
  theme_minimal()

# (Opcional) Guardar la visualización
ggsave("quecholac_frontera_farmacias.png", width = 10, height = 8)

{r}
# Cargar librerías
library(sf)
library(ggplot2)
library(deldir)

# Cargar los shapefiles
frontera_quecholac <- st_read("C:/Users/Diego/OneDrive/Documents/Dataton/Quecholac/frontera_quecholac.shp")
lambert_quecholac <- st_read("C:/Users/Diego/OneDrive/Documents/Dataton/Quecholac/lambert_quecholac.shp")

# Extraer coordenadas de las farmacias
coords_farmacias_quecholac <- st_coordinates(lambert_quecholac)

# Calcular el diagrama de Voronoi
voronoi_result_quecholac <- deldir(coords_farmacias_quecholac[,1], coords_farmacias_quecholac[,2])
vertices_quecholac <- data.frame(voronoi_result_quecholac$dirsgs)
names(vertices_quecholac) <- c("x1", "y1", "id1", "id2")
vertices_sf_quecholac <- st_as_sf(vertices_quecholac[, c("x1", "y1")], coords = c("x1", "y1"), crs = st_crs(frontera_quecholac))

# Calcular distancias a los puntos de farmacias
distances <- apply(st_coordinates(vertices_sf_quecholac), 1, function(v) {
  min(sqrt((coords_farmacias_quecholac[,1] - v[1])^2 + (coords_farmacias_quecholac[,2] - v[2])^2))
})

# Añadir las distancias al objeto de vértices
vertices_sf_quecholac$distance <- distances

# Convertir vertices_sf a dataframe
vertices_quecholac_df <- as.data.frame(st_coordinates(vertices_sf_quecholac))
vertices_quecholac_df$distance <- vertices_sf_quecholac$distance

# Renombrar las columnas de las coordenadas para evitar confusiones
colnames(vertices_quecholac_df) <- c("X", "Y", "distance")

# Graficar el mapa de calor de las distancias a los vértices de Voronoi
ggplot() +
  geom_sf(data = frontera_quecholac, fill = NA, color = "black") +
  geom_point(data = vertices_quecholac_df, 
             aes(x = X, y = Y, color = distance), size = .3) +
  scale_color_gradient(low = "green", high = "red") +
  labs(title = "Mapa de Calor de Distancias a Vértices de Voronoi",
       color = "Distancia") +
  theme_minimal()

# (Opcional) Guardar la visualización
ggsave("quecholac_frontera_farmacias.png", width = 10, height = 8)

{r}
# Filtrar los vértices que están dentro de la frontera del municipio
vertices_filtered_quecholac <- vertices_sf_quecholac[st_within(vertices_sf_quecholac, frontera_quecholac, sparse = FALSE), ]

# Verificar si hay vértices dentro de la frontera
if (nrow(vertices_filtered_quecholac) > 0) {
  # Calcular distancias a los puntos de farmacias solo para los vértices filtrados
  distances_filtered_quecholac <- apply(st_coordinates(vertices_filtered_quecholac), 1, function(v) {
    min(sqrt((coords_farmacias_quecholac[,1] - v[1])^2 + (coords_farmacias_quecholac[,2] - v[2])^2))
  })
  
  # Añadir las distancias al objeto de vértices filtrados
  vertices_filtered_quecholac$distance <- distances_filtered_quecholac
  
  # Convertir vertices_filtered a dataframe
  vertices_filtered_quecholac_df <- as.data.frame(st_coordinates(vertices_filtered_quecholac))
  vertices_filtered_quecholac_df$distance <- vertices_filtered_quecholac$distance
  
  # Renombrar las columnas de las coordenadas
  colnames(vertices_filtered_quecholac_df) <- c("X", "Y", "distance")
  
  # Graficar el mapa de calor de las distancias a los vértices de Voronoi filtrados
  ggplot() +
    geom_sf(data = frontera_quecholac, fill = NA, color = "black") +
    geom_point(data = vertices_filtered_quecholac_df, 
               aes(x = X, y = Y, color = distance), size = .4) +
    scale_color_gradient(low = "green", high = "red") +
    labs(title = "Mapa de Calor de Distancias a Vértices de Voronoi (Filtrados)",
         color = "Distancia") +
    theme_minimal()
} else {
  print("No hay vértices dentro de la frontera del municipio.")
}

{r}
# Ordenar los vértices filtrados por la distancia en orden descendente
vertices_top_20_quecholac <- vertices_filtered_quecholac_df[order(-vertices_filtered_quecholac_df$distance), ]

# Seleccionar los 20 vértices más lejanos
vertices_top_20_quecholac <- vertices_top_20_quecholac[1:20, ]

# Imprimir la tabla con los 20 vértices más lejanos
print(vertices_top_20_quecholac)

# Graficar el mapa con los 20 vértices más lejanos
ggplot() +
  geom_sf(data = frontera_quecholac, fill = NA, color = "black") +  # Dibujar el municipio
  geom_point(data = vertices_top_20_quecholac, 
             aes(x = X, y = Y, color = distance), size = .4) +          # Graficar los 20 vértices
  scale_color_gradient(low = "green", high = "red") +                 # Escala de color de verde a rojo
  labs(title = "Mapa de los 20 Vértices más Lejanos de Farmacias",
       color = "Distancia") +
  theme_minimal()
